
set nocompatible              " be iMproved, required
filetype on                  " required

" Vim native settings
set pastetoggle=<F2>
set nowrap                    " don't wrap lines
set smartindent
set tabstop=2
set shiftwidth=2
set shiftround
set expandtab
set list                      " show invisible chars
set incsearch
set hlsearch
set ignorecase                " Ignore case when searching
set smartcase                 " But sometimes is useful
set showmatch                  " Highlight matching parens
set showcmd " Show leader
set cursorline                " Highlight cursor line

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1

" Numbers
set number                    " Show gutter
set numberwidth=5
set relativenumber

" Show invisibles
set list " Display white space
set listchars=tab:▸\ ,eol:¬,trail:·,space:·,extends:>,precedes:<

" Show matching parens
let loaded_matchparen = 1

" Don’t create backups when editing files in certain directories
" set backupskip=/tmp/*,/private/tmp/*

" Centralize backups, swapfiles and undo history
if exists("&backupdir")
  set backupdir=~/.vim/backups
endif

if exists("&directory")
  set directory=~/.vim/swaps
endif

if exists("&undodir")
  set undodir=~/.vim/undo
  set undofile
endif

" Load bundles
if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Reload .vimrc whenever we make changes
augroup reload_vimrc " {
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END " }

" Filetypes
au BufNewFile,BufRead *.js.flow set filetype=javascript
au BufNewFile,BufRead *.md set filetype=markdown


" Theme
syntax enable
set t_Co=256

if has("termguicolors")
  " set termguicolors       " enable true colors support
endif

" Ayu
let ayucolor="light"  " for light version of theme
let ayucolor="mirage"   " for mirage version of theme
let ayucolor="dark"   " for dark version of theme

" colorscheme ayu
" set background=light

" Nord
colorscheme nord
set background=dark

" Solarized
" let g:solarized_visibility="low"
" set background=light
" colorscheme solarized

" NERDTree
let NERDTreeShowHidden=1      " Show hidden files

map <C-n> :NERDTreeToggle<CR>
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if &ft!="gitcommit" | NERDTree 
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif 
autocmd VimEnter * wincmd p

" gitcommits
au FileType gitcommit setl spell

" undotree
nnoremap U :UndotreeToggle<cr>
let g:undotree_WindowLayout = 3
let g:undotree_ShortIndicators = 1
let g:undotree_SetFocusWhenToggle = 1

" Ale
let g:airline#extensions#ale#enabled = 1 " Show errors in statusline
let g:ale_lint_on_text_changed = 'always' " Run ale when text changes
let g:ale_lint_on_enter = 1              " Run ale when opening a file
let g:ale_fix_on_save = 1
let g:ale_sign_error='●'
let g:ale_sign_warning='●'
let g:ale_sign_column_always = 1
let g:ale_completion_enabled=1    " Enable completion where available.
let g:ale_linters = {
\   'javascript': ['eslint', 'flow', 'vale'],
\   'typescript': ['tslint', 'tsserver', 'vale'],
\   'markdown': ['vale'],
\   'gitcommit': ['vale'],
\}

let g:ale_fixers = {
\  'javascript': ['eslint'],
\  'typescript': ['tslint'],
\}

hi ALEErrorSign ctermfg=red ctermbg=none
hi ALEWarningSign ctermfg=yellow ctermbg=none


let g:prettier#config#single_quote = 'true'
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#arrow_parens = 'avoid'
let g:prettier#config#parser = 'babylon'
let g:prettier#config#trailing_comma = 'es5'

" vim-elm
let g:elm_jump_to_error = 1
let g:elm_make_show_warnings = 1
let g:elm_detailed_complete = 1
let g:elm_format_autosave = 1       " Auto-format Elm files
let g:elm_format_fail_silently = 0
let g:elm_setup_keybindings = 1

" vim-javascript
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_flow = 1

" vim-flow
let g:flow#autoclose=1
let g:flow#enable=1
let g:flow#showquickfix = 1

" vim-airline
let g:airline_powerline_fonts=0             " Automatically populate the g:airline_symbols dictionary with the powerline symbols.
let g:airline#extensions#tabline#enabled=1  " Automatically displays all buffers when there's only one tab open.

" vim-autoclose
let g:autoclose_vim_commentmode = 1

" vim-signify
let g:signify_vcs_list = ['git', 'hg']

filetype plugin indent on    " required

" vim-markdown
let g:vim_markdown_toc_autofit = 1
au FileType markdown setl conceallevel=2
au FileType markdown setl spell

" FZF
nnoremap <silent> <Leader><Leader> :Files<CR>
nnoremap <silent> <Leader>ag :Ag<CR>
nnoremap <silent> <Leader><Enter> :Buffers<CR>

" vimwiki
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]
