#!/usr/bin/env bash

# Unofficial strict-mode for bash
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

# Set default values
DOTFILES_REPOSITORY="https://github.com/Couto/.dotfiles"
DOTFILES_DIRECTORY=$HOME/.dotfiles

# Colors
red='\x1B[0;31m';
green='\x1B[0;32m';
cyan='\x1B[0;36m';
gray='\x1B[0;30m';
NC='\x1B[0m';
yellow='\x1B[0;33m'

# Unicode characters
unicode_empty_circle=○;
unicode_full_circle=●;
unicode_crossed_circle=⊘;
unicode_x_mark=✖;
unicode_check_mark=✔;
unicode_right_arrow=➔;


# Status indicators
abort () {
    echo "";
    echo -e " ${red}${unicode_x_mark}${NC} $@";
    echo "";
    sleep 1;
    exit 1;
}

warn () {
    echo -e " ${yellow}⚠${NC} $@";
}

info () {
    echo -e " ${cyan}${unicode_right_arrow}${NC} $@";
}

success () {
    echo -e " ${green}${unicode_check_mark}${NC} $@";
}

prompt () {
    echo "$@";
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) return 0; exit;;
            No ) return 1; exit;;
        esac
    done
}

ask () {
    read  -p "$@ : " answer;
    echo $answer;
}

ask_default () {
    local question="$1";
    local default_value="$2";

    answer=$(ask "$1 [$2]");

    if [ -z "$answer" ]; then
        echo $default_value;
    else
        echo $answer;
    fi
}

git_clone () {
    local repository="$1";
    local destination="$2";

    if [[ -d "$destination" ]]; then
		abort "Directory $destination already exists, aborting..."
    fi

    git clone --quiet --depth 1 "$repository" "$destination";
    cd $destination;
    git submodule update --init;
    cd ..
}

is_mavericks () {

    if [[ $(uname -s) != "Darwin" ]]; then
        return 1;
    fi

    local version=$(sw_vers -productVersion);

    if [[ $version =~ ^[0-9]+\.([0-9]+) ]]; then
        local middle=${BASH_REMATCH[1]};
        if [ $middle -eq "9" ]; then
            return 0;
        else
            return 1;
        fi
    fi
}

has_command_line_tools () {

    if [ $(xcode-select -p &> /dev/null; printf $?) -ne 0 ]; then
        return 1;
    else
        return 0;
    fi
}

install_command_line_tools () {
    
    info "Installing command line tools.";

    if [ ! has_command_line_tools ]; then
        info "A dialog to install command line tools will popup.

   Please follow the GUI instructions or 
   press ctrl+C to cancel the script."

        xcode-select --install &> /dev/null

        while [ ! has_command_line_tools ];
        do
            sleep 2;
        done

    fi

    success "Command line tools are installed."
}

install_homebrew () {

    if [[ ! -x $(which brew) ]]; then
        info "Installing homebrew.";

        printf '\n' | ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
        # └─ simulate ENTER keypress
        print_result $? "brew"
    else

        info "Update and clean up homebrew packages.";

        brew update
        brew upgrade
        brew cleanup
    fi

}

main () {
    
    # Don't run if it's not Mavericks
    [ ! is_mavericks ] && abort "Sorry but this was only tested on OSX Mavericks";
    
    install_command_line_tools;
    install_homebrew;

}

main $@;
