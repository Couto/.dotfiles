#!/bin/bash


# Set default values
DOTFILES_REPOSITORY="Couto/.dotfiles"
DOTFILES_DIRECTORY=$HOME/_dotfiles


set -e;

# Colors
red='\x1B[0;31m';
green='\x1B[0;32m';
cyan='\x1B[0;36m';
gray='\x1B[0;30m';
NC='\x1B[0m';
yellow='\x1B[0;33m'
clear='\033[0K'

# Unicode characters
unicode_empty_circle=○;
unicode_full_circle=●;
unicode_crossed_circle=⊘;
unicode_x_mark=✖;
unicode_check_mark=✔;
unicode_right_arrow=➔;


# Status indicators
abort () {
    echo "";
    echo -e " ${red}${unicode_x_mark}${NC} $@";
    echo "";
    sleep 1;
    exit 1;
}

warn () {
    echo -e " ${yellow}⚠${NC} $@";
}

info () {
    echo -e " ${cyan}${unicode_right_arrow}${NC} $@";
}

success () {
    echo -e " ${green}${unicode_check_mark}${NC} $@";
}

# Line status indicators
# These will always be replaced by the next line
linfo () {
    echo -ne "${clear}";
    echo -ne " ${cyan}${unicode_empty_circle}${NC} $@\r";
}

lfail () {
    echo -ne "${clear}";
    echo -ne " ${red}${unicode_crossed_circle}${NC} $@\r"
}

lsuccess () {
    echo -ne "${clear}";
    echo -ne " ${green}${unicode_full_circle}${NC} $@\r";
}


prompt () {
    echo "$@";
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) return 0; exit;;
            No ) return 1; exit;;
        esac
    done
}

ask () {
    read  -p "$@ : " answer;
    echo $answer;
}

ask_default () {
    local question="$1";
    local default_val="$2";

    answer=$(ask "$1 [$2]");

    if [ -z "$answer" ]; then
        echo $default_val;
    else
        echo $answer;
    fi
}

git_clone () {
    local repository="$1";
    local destination="$2";

    if [[ -d "$destination" ]]; then
		abort "Directory $destination already exists, aborting..."
    fi

    git clone --quiet --depth 1 "$repository" "$destination";
}

github () {
    local repository="$1";
    local destination="$2";

    linfo "Cloning $1";
    git_clone "git@github.com:$repository.git" "$destination" || abort "Failed."
    lsuccess "Cloned $repository to $destination;"
}

is_mavericks () {

    if [[ $(uname -s) != "Darwin" ]]; then
        return false;
    fi

    local version=$(sw_vers -productVersion);
    
    if [[ $version =~ ^[0-9]+\.([0-9]+) ]]; then
        local middle=${BASH_REMATCH[1]};
        if [ $middle -eq "9" ]; then
            return true;
        else
            return false;
        fi
    fi
}

has_command_line_tools () {

    local dev_dir=$(/usr/bin/xcode-select -print-path 2>/dev/null);

    if [ -z "$dev_dir" ]; then
        return false;
    else
        return true;
    fi

}

install_homebrew () {

    if [[ ! -f $(which brew) ]]; then
        info "Installing homebrew, please follow the installer instructions:";
        ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    fi

    cd $DOTFILES_DIRECTORY/homebrew

    info "Installing brews, casks and fonts...";

    local install=$(brew bundle Brewfile && brew bundle Caskfile && brew bundle Foundryfile);

    if [[ ! $install ]]; then
        prompt "Something failed. Would you like to try again?" && install_homebrew || abort "Error occurred while installing brews.";
    else
        success "homebrew and recipes installed successfully."
    fi
}

main () {

    info "Checking OS.";

    # Ask the user if they want to continue
    # even if the computer is not a Mac
    # this is risky since I'm not testing on linux.
    [[ $(uname -s) != "Darwin" ]] && (prompt "

      This is not an OSX machine.
      The following script was only tested on OSX Mavericks,
      and is most likely to break on other systems.

      Do you still want to proceed at your own risk?

    " || exit);

    info "Checking OS version.";

    # Inform the user that although they are using OSX
    # I only tested on mavericks
    is_mavericks || (prompt "

      Although this is an OSX machine, the following script
      was only tested on Mavericks.

      Do you still want to proceed at your own risk?

    " || exit);

    info "Check if Command Line Tools are installed.";

    # Check if the command line tools are installed
    # Try to install them, if not.
    [[ ! has_command_line_tools ]] && (prompt "

        You don't have the Command-Line tools installed.
        Homebrew usually allows you to install Command-Line Tools,
        and this script will install Homebrew, so you should be fine.

        Do you want to proceed with the script?

    " || exit);

    install_homebrew

    info "Collecting user information and preferences";

    # Ask the user if they want to change some defaults
    DOTFILES_DIRECTORY=$(ask_default "Select the destination directory" "$HOME/.dotfiles");
    COMPUTER_NAME=$(ask_default "What's the computer name?" "$(scutil --get ComputerName)");
    GIT_NAME=$(ask_default "What name do you want to use to sign your git commits?" "$(finger $(whoami) | awk -F: '{ print $3 }' | head -n1 | sed 's/^ //')");
    GIT_EMAIL=$(ask "Which email do you want to use to sign your git commits?");

    github "$DOTFILES_REPOSITORY" "$DOTFILES_DIRECTORY";

    #install_rbenv
    #install_pyenv
    #install_nvm
    #install_dnsmasq

    # link $DOTFILES_DIRECTORY/**/*.symlink $HOME

}

main;
