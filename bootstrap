#!/usr/bin/env bash

# Install dependencies and clone my .dotfiles

# Unofficial strict-mode for bash
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
IFS=$'\n\t'

# Set default values
DOTFILES_REPOSITORY="https://github.com/Couto/.dotfiles"
DOTFILES_DIRECTORY=${HOME}/.dotfiles

declare -a SYMLINK_FILES=(
    "${DOTFILES_DIRECTORY}/atom/           : ${HOME}/.atom"
    "${DOTFILES_DIRECTORY}/zsh/.zshrc      : ${HOME}/.zshrc"
    "${DOTFILES_DIRECTORY}/vim/            : ${HOME}/.vim"
    "${DOTFILES_DIRECTORY}/vim/.vimrc      : ${HOME}/.vimrc"
    "${DOTFILES_DIRECTORY}/tmux/.tmux.conf : ${HOME}/.tmux.conf"
    "${DOTFILES_DIRECTORY}/git/.gitconfig  : ${HOME}/.gitconfig"
    "${DOTFILES_DIRECTORY}/git/.gitignore  : ${HOME}/.gitignore"
);

#forEach () {
#
#    local array="$1";
#    local cmd="$2";
#    local counter=0;


#    for item in ${array[@]};
#    do
#        ${cmd} "${item}" "${counter}" "${array}";
#        (( counter++ ));
#    done
#}


#forEach "${SYMLINK_FILES}" "echo";

#exit 0;

# Colors
nc='\x1B[0m';
gray='\x1B[0;30m';
red='\x1B[0;31m';
green='\x1B[0;32m';
yellow='\x1B[0;33m'
cyan='\x1B[0;36m';

# Unicode characters
unicode_empty_circle=○;
unicode_full_circle=●;
unicode_crossed_circle=⊘;
unicode_x_mark=✖;
unicode_check_mark=✔;
unicode_right_arrow=➔;


# Status indicators
msg () {
    local symbol=$1;

    shift
    echo " ${symbol} [$(date +'%Y-%m-%dT%H:%M:%S%z')] $@"
}

warn () {
    msg "${yellow}${unicode_full_circle}${nc}" $@;
}

info () {
    msg "${cyan}${unicode_right_arrow}${nc}" $@;
}

success () {
    msg "${green}${unicode_check_mark}${nc}" $@;
}

error () {
    msg "${red}${unicode_x_mark}${nc}" $@ >&2;
    exit 1;
}


prompt () {
    echo "$@";
    select yn in "Yes" "No"; do
        case ${yn} in
            Yes ) return 0; exit;;
            No ) return 1; exit;;
        esac
    done
}

ask () {
    read  -p "$@ : " answer;
    echo ${answer};
}

ask_default () {
    local question="$1";
    local default_value="$2";
    local answer=$(ask "$1 [$2]");

    if [ -z "${answer}" ]; then
        echo ${default_value};
    else
        echo ${answer};
    fi
}

git_clone () {
    local repository="$1";
    local destination="$2";

    if [[ -d "${destination}" ]]; then
		abort "Directory ${destination} already exists, aborting..."
    fi

    git clone --quiet --depth 1 "${repository}" "${destination}";
    cd ${destination};
    git submodule update --init;
    cd ..
}

is_mavericks () {

    if [[ $(uname -s) != "Darwin" ]]; then
        return 1;
    fi

    local version=$(sw_vers -productVersion);

    if [[ ${version} =~ ^[0-9]+\.([0-9]+) ]]; then
        local middle=${BASH_REMATCH[1]};

        if [ ${middle} -eq "9" ]; then
            return 0;
        else
            return 1;
        fi
    fi
}

has_command_line_tools () {
    local xcode_file=$(xcode-select -p 2>/dev/null);

    if [[ -n "${xcode_file}" && -e "${xcode_file}" ]]; then
        return 0;
    else
        return 1;
    fi
}

has_homebrew () {
    local brew_binary=$(which brew);

    if [[ -n "${brew_binary}" && -e "${brew_binary}" ]]; then
        return 0;
    else
        return 1;
    fi
}

install_command_line_tools () {

    info "Installing command line tools.

    A dialog to install command line tools will popup.
    Please follow the GUI instructions or
    press ctrl+C to cancel the script.";

    xcode-select --install &> /dev/null

    while ! has_command_line_tools;
    do
        sleep 5;
    done

    success "Command line tools are installed."
}

install_homebrew () {
    info "Installing homebrew.";

    printf '\n' | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    # └─ simulate ENTER keypress

    success "Installed homebrew";
}

update_homebrew () {

    info "Updating homebrew repositories and packages."

    brew update;
    brew upgrade;
    brew cleanup;

    success "Updated homebrew and packages".
}

main () {

    if ! is_mavericks; then abort "Sorry but this was only tested on OSX Mavericks"; fi
    if ! has_command_line_tools; then install_command_line_tools; fi
    if ! has_homebrew; then install_homebrew; fi

    # update_homebrew;

}

main $@;
