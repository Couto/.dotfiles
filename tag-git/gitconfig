[push]
  default = simple

[alias]
  # An alias to list all alias... how meta!
  aliaslist =  config --get-regexp '(alias.*)'

  # serve the repository locally so that colleagues can access it on LAN
  # They should use the remote git://<ip>/ <- that's it
  # https://gist.github.com/datagrok/5080545
  serve = daemon --reuseaddr --base-path=. --export-all --verbose --enable=receive-pack

  # Better git status
  st = status -sb

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline --graph --abbrev-commit 

  # Nice git log with graph view
  lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %G? %an%C(reset)' --all

  # Pull changes using rebase
  up = pull --rebase --prune
  
  # Pull changes but fast-forward only
  pf = pull --ff-only

  pp = !"git push -u origin $(git_current_branch)"

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -S -av
  cp = !git add -p && git commit -S -v

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered
	oldest-ancestor = !zsh -c 'diff --old-line-format= --new-line-format= <(git rev-list --first-parent \"${1:-master}\") <(git rev-list --first-parent \"${2:-HEAD}\") | head -1' -

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.dotfiles/tag-git/.gitignore
  attributesfile = ~/.dotfiles/tag-git/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Be case sensitive
  ignorecase = false
  pager = "$(brew --prefix)/share/git-core/contrib/diff-highlight/diff-highlight | less -rx1,5"

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = always

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  commit = green
  meta = yellow
  frag = cyan
  old = red
  new = green
  whitespace = red reverse

[pager]
  log = diff-highlight | less
  show = diff-highlight | less
  diff = diff-highlight | less -FRXsu --tabs=4

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[color "diff-highlight"]
  oldHighlight = ul
  oldReset = noul

[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22

[diff]
  # Detect copies as well as renames
  renames = copies

[help]
  # Automatically correct and execute mistyped commands
  autocorrect = 1

[rerere]
  enable = 1
  # https://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/

[filter "authtoken"]
  clean = cat
  smudge = sed '/_authToken/d'

[include]
  # Use this file to override settings, like at work computer
  path = .gitconfig.user
  path = .gitconfig.local

[commit]
	template = ~/.dotfiles/tag-git/.gitmessage

# [color "diff-highlight"]
#   oldNormal = red bold
#   oldHighlight = red bold 52
#   newNormal = green bold
#   newHighlight = green bold 22
 
